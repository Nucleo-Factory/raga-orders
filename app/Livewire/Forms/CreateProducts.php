<?php

namespace App\Livewire\Forms;

use App\Models\Product;
use Livewire\Component;
use Carbon\Carbon;

class CreateProducts extends Component {
    // Product fields
    // Item ID is autogenerated in the database
    public $material_id;
    public $description;
    public $legacy_material;
    public $contract;
    public $order_quantity;
    public $qty_unit;
    public $price_per_unit;
    public $price_per_uon;
    public $net_value;
    public $vat_rate;
    public $vat_value;
    public $delivery_date;
    public $title;
    public $subtitle;

    public $product;

    // Arrays for select options
    public $qtyUnitOptions = ["kg" => "Kilogramos", "pcs" => "Piezas", "lt" => "Litros", "m" => "Metros"];
    public $vatRateOptions = ["0" => "0%", "16" => "16%", "8" => "8%"];

    public function mount($product = null)
    {
        if ($product) {
            $this->product = $product;
            $this->material_id = $product->material_id;
            $this->description = $product->description;
            $this->legacy_material = $product->legacy_material;
            $this->contract = $product->contract;
            $this->order_quantity = $product->order_quantity;
            $this->qty_unit = $product->qty_unit;
            $this->price_per_unit = $product->price_per_unit;
            $this->price_per_uon = $product->price_per_uon;
            $this->net_value = $product->net_value;
            $this->vat_rate = $product->vat_rate;
            $this->vat_value = $product->vat_value;
            $this->delivery_date = Carbon::parse($product->delivery_date)->format('Y-m-d');
        }
    }

    public function createProduct()
    {
        // Validate form
        $this->validate([
            'material_id' => 'required|string|max:50',
            'description' => 'required|string',
            'legacy_material' => 'nullable|string|max:100',
            'contract' => 'nullable|string|max:100',
            'order_quantity' => 'required|numeric|min:0',
        ]);

        // Create product
        $product = Product::create([
            'material_id' => $this->material_id,
            'description' => $this->description,
            'legacy_material' => $this->legacy_material,
            'contract' => $this->contract,
            'order_quantity' => $this->order_quantity,
            'qty_unit' => $this->qty_unit,
            'price_per_unit' => $this->price_per_unit,
            'price_per_uon' => $this->price_per_uon,
            'net_value' => $this->net_value,
            'vat_rate' => $this->vat_rate,
            'vat_value' => $this->vat_value,
            'delivery_date' => $this->delivery_date,
        ]);

        // Reset form
        $this->reset();

        // Dispatch event to open modal
        $this->dispatch('open-modal', 'modal-product-created');
    }

    // Calculate net value when price or quantity changes
    public function updatedOrderQuantity()
    {
        $this->calculateNetValue();
    }

    public function updatedPricePerUnit()
    {
        $this->calculateNetValue();
    }

    public function updatedVatRate()
    {
        $this->calculateVatValue();
    }

    private function calculateNetValue()
    {
        if (is_numeric($this->order_quantity) && is_numeric($this->price_per_unit)) {
            $this->net_value = $this->order_quantity * $this->price_per_unit;
            $this->calculateVatValue();
        }
    }

    private function calculateVatValue()
    {
        if (is_numeric($this->net_value) && is_numeric($this->vat_rate)) {
            $this->vat_value = $this->net_value * ($this->vat_rate / 100);
        }
    }

    public function render() {
        return view('livewire.forms.create-products');
    }
}
