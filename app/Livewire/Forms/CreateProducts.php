<?php

namespace App\Livewire\Forms;

use App\Models\Product;
use Livewire\Component;
use Carbon\Carbon;

class CreateProducts extends Component {
    // Product fields
    // Item ID is autogenerated in the database
    public $material_id;
    public $short_text;
    public $supplying_plant;
    public $unit_of_measure;
    public $plant;
    public $vendor_name;
    public $vendor_code;
    public $title;
    public $subtitle;

    public $product;

    // Arrays for select options
    public $qtyUnitOptions = ["kg" => "Kilogramos", "pcs" => "Piezas", "lt" => "Litros", "m" => "Metros"];
    public $vatRateOptions = ["0" => "0%", "16" => "16%", "8" => "8%"];

    public function mount($product = null)
    {
        if ($product) {
            $this->product = $product;
            $this->material_id = $product->material_id;
            $this->short_text = $product->short_text;
            $this->supplying_plant = $product->supplying_plant;
            $this->unit_of_measure = $product->unit_of_measure;
            $this->plant = $product->plant;
            $this->vendor_name = $product->vendor_name;
            $this->vendor_code = $product->vendor_code;
            $this->title = "Editar Producto";
            $this->subtitle = "Ingrese los datos para editar el producto";
        } else {
            $this->title = "Crear Producto";
            $this->subtitle = "Ingrese los datos para crear un nuevo producto";
        }
    }

    public function createProduct()
    {
        // Validate form
        $this->validate([
            'material_id' => 'required|string|max:50',
            'short_text' => 'required|string',
            'supplying_plant' => 'nullable|string|max:100',
            'unit_of_measure' => 'nullable|string|max:100',
            'plant' => 'nullable|string|max:100',
            'vendor_name' => 'nullable|string|max:100',
            'vendor_code' => 'nullable|string|max:100',
        ]);

        // Create product
        $product = Product::create([
            'material_id' => $this->material_id,
            'short_text' => $this->short_text,
            'supplying_plant' => $this->supplying_plant,
            'unit_of_measure' => $this->unit_of_measure,
            'plant' => $this->plant,
            'vendor_name' => $this->vendor_name,
            'vendor_code' => $this->vendor_code,
        ]);

        // Reset form
        $this->reset();

        // Dispatch event to open modal
        $this->dispatch('open-modal', 'modal-product-created');
    }

    // Calculate net value when price or quantity changes
    public function updatedOrderQuantity()
    {
        $this->calculateNetValue();
    }

    public function updatedPricePerUnit()
    {
        $this->calculateNetValue();
    }

    public function updatedVatRate()
    {
        $this->calculateVatValue();
    }

    private function calculateNetValue()
    {
        if (is_numeric($this->order_quantity) && is_numeric($this->price_per_unit)) {
            $this->net_value = $this->order_quantity * $this->price_per_unit;
            $this->calculateVatValue();
        }
    }

    private function calculateVatValue()
    {
        if (is_numeric($this->net_value) && is_numeric($this->vat_rate)) {
            $this->vat_value = $this->net_value * ($this->vat_rate / 100);
        }
    }

    public function render() {
        return view('livewire.forms.create-products');
    }
}
